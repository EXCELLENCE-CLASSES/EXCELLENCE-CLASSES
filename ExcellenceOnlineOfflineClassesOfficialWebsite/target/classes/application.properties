
# JPA
#spring.jpa.show-sql=true

#server.port=8080

#spring.datasource.url=

#spring.datasource.driverClassName=

#spring.datasource.username=root

#spring.datasource.password=
#A DataSource is a factory for connections to the physical databases. It is an alternative to the DriverManager facility. A datasource uses a URL along with username/password credentials to establish the database connection.
#autoReconnect=true" Increase the timeout.(Increase Connection Time)
#using SSL the verifyServerCertificate property is set to 'false'.
#An SSL certificate is a bit of code on your web server that provides security for online communications. When a web browser contacts your secured website, the SSL certificate enables an encrypted connection. ... SSL certificates also inspire trust because each SSL certificate contains identification information.
spring.datasource.url=jdbc:mysql://localhost:3306/excellence_database?allowPublicKeyRetrieval=true&autoReconnect=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=excellence

#Driver is a software component enabling a Java application to interact with a database. ... The JDBC driver gives out the connection to the database and implements the protocol for transferring the query and result between client and database.
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#The values create, create-drop, validate, and update basically influence how the schema tool management will manipulate the database schema at startup.
#the update operation will query the JDBC driver's API to get the database metadata and then Hibernate compares the object model it creates based on reading your annotated classes or HBM XML mappings and will attempt to adjust the schema on-the-fly.

#The update operation for example will attempt to add new columns, constraints, etc but will never remove a column or constraint that may have existed previously but no longer does as part of the object model from a prior run.

#Typically in test case scenarios, you'll likely use create-drop so that you create your schema, your test case adds some mock data, you run your tests, and then during the test case cleanup, the schema objects are dropped, leaving an empty database.

#In development, it's often common to see developers use update to automatically modify the schema to add new additions upon restart. But again understand, this does not remove a column or constraint that may exist from previous executions that is no longer necessary.

#In production, it's often highly recommended you use none or simply don't specify this property. That is because it's common practice for DBAs to review migration scripts for database changes, particularly if your database is shared across multiple services and applications.
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project.


# Allows Hibernate to generate SQL optimized for a particular DBMS(to make as perfect, effective, or functional as possible)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#show-sql is used to print SQL statements are on the console
spring.jpa.show-sql=true






